Dicas interessantes sobre modelagem do schema:
	https://www.youtube.com/watch?v=R8Ny0i5S978

			Helps clients to express what they need. 
			Remove need to version APIs
			Colocate data needs to views. 
			Strong types. 
				Strong tools as GraphiQL	

		Queries
			Anathomy of a Query - https://dev-blog.apollodata.com/the-anatomy-of-a-graphql-query-6dffa9e9e747	

		Mutations
			https://dev-blog.apollodata.com/designing-graphql-mutations-e09de826ed97
			https://dev-blog.apollodata.com/react-graphql-tutorial-mutations-764d7ec23c15


	Conversa geral sobre clientes GraphQL
	Apresentar uma maneira de usar o GraphQL no Apollo
	Fundamentar essa maneira 
	Nosso objetivo não é esgotar o assunto, mas sim dar boas direções para que ele seja melhor estudado. 

	Conversa geral sobre servidores GraphQL
		
			Entenda que o schema não é um proxy burro ao banco. É a sua modelagem de negócios que serve os dados para o(s) frontend(s) da melhor, e mais clara maneira possível. 
			Inclusive pode servir dados de diversas fontes diferentes. 

			Optimize human time, not machine time
				Premature optimization is one of the cardinal sins of programming
				I realized that sticking to one query per resolver actually optimized a far more important parameter: 
					how many hours I spent writing and rewriting code every time the API changed.
				É mais barato ter menos mão de obra e mais infra. 
					Principalmente se temos clareza dos gargalos. 

			Depois disso pense em otimizar performance
				Mensure constantemente. 
				Melhor do que otimizar queries a bancos é usar cache e batching. 
					Há dúvidas se muitas queries simples são realmente melhores que uma grande.
						Mas, independentemente disso, o ganho em ter um código limpo é 
							poder reduzir mão de obra, e a 
							facilidade e velocidade de manutenção e evolução. 
					De qualquer forma não tome isso por verdade. Meça, teste e escolha seu caminho. 
					
					https://www.youtube.com/watch?v=c35bj1AT3X8 - Excelente, mostra o funcionamento de JS assíncrono e Promisses para então explicar o DataLoader.
					https://www.youtube.com/watch?v=OQTnXNCDywA - Lee Byron explicando o código fonte do DataLoader.js



				Ferramentas de monitoramento: 
					http://www.apollodata.com/optics

				Referências
					https://scaphold.io/community/blog/apollo-optics-and-your-graphql-server/
					https://dev-blog.apollodata.com/optimizing-your-graphql-request-waterfalls-7c3f3360b051




		Servers: 
			https://dev-blog.apollodata.com/how-to-build-graphql-servers-87587591ded5

		Clients
			https://www.youtube.com/watch?v=1Fg_QtzI7SU




	REFERÊNCIAS

	Material excelente sobre connections
		https://dev-blog.apollodata.com/explaining-graphql-connections-c48b7c3d6976

		
